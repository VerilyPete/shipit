<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Ship It</title>
    <link>https://shipit.peterhollmer.com/posts/</link>
    <description>Recent content in Posts on Ship It</description>
    <generator>Hugo -- 0.152.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Oct 2025 00:07:00 -0500</lastBuildDate>
    <atom:link href="https://shipit.peterhollmer.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Containers</title>
      <link>https://shipit.peterhollmer.com/posts/containers/</link>
      <pubDate>Tue, 28 Oct 2025 00:07:00 -0500</pubDate>
      <guid>https://shipit.peterhollmer.com/posts/containers/</guid>
      <description>&lt;h1 id=&#34;apples-native-containers-in-macos-26&#34;&gt;Apple’s Native Containers in macOS 26&lt;/h1&gt;
&lt;p&gt;With the furor around Liquid Glass, it’s easy to miss that in the latest release of macOS, Apple has quietly added their own unique take on containers.&lt;/p&gt;
&lt;h3 id=&#34;containers&#34;&gt;Containers?&lt;/h3&gt;
&lt;p&gt;If you’re reading this, you’re probably somewhat familiar with containers. Just in case, I’ll give a condensed explanation.&lt;/p&gt;
&lt;p&gt;Containerization is the practice of packaging an application together with all of its underlying dependencies into a tidy bundle that can be distributed and run on any platform with supported architecture. Namespaces and cgroups (both features of the Linux kernel) confine what the container can see and keep its resource usage within specified limits. The result is an application running in an isolated environment without the associated bloat of virtualizing an entire operating system.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
